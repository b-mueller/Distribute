// Test functions in open state of a project
// Before, fund a user with tokens and have them propose and fully stake a project

/*
let ethPrice = await getEthPriceNow.getEthPriceNow()
ethPrice = ethPrice[Object.keys(ethPrice)].ETH.USD
console.log(ethPrice)
*/

const TokenRegistry = artifacts.require('TokenRegistry')
const DistributeToken = artifacts.require('DistributeToken')
const ProjectRegistry = artifacts.require('ProjectRegistry')
const Project = artifacts.require('Project')
const Promise = require('bluebird')
const getEthPriceNow = require('get-eth-price')
const assertThrown = require('../utils/assertThrown')
const lightwallet = require('eth-signer')
const waitForTxReceipt = require('../utils/waitForTxReceipt')
const evmIncreaseTime = require('../utils/evmIncreaseTime')
//const ethJSABI = require("ethjs-abi")
web3.eth = Promise.promisifyAll(web3.eth)

contract('Open State', (accounts) => {
  let TR
  let PR
  let DT
  let PROJ, PROJ2
  //proposer only necessary in the
  let proposer = accounts[0]
  let staker1 = accounts[2]
  let staker2 = accounts[3]
  let staker3 = accounts[4]
  let nonStaker = accounts[5]

  let tokens = 50000
  let stakingPeriod = 20000000000     //10/11/2603 @ 11:33am (UTC)
  let projectCost = web3.toWei(1, 'ether')
  let projectCost2 = web3.toWei(0.5, 'ether')
  let proposeProportion = 20
  let proposeReward = 100

  let proposerTokenCost
  let proposerBalance, stakerBalance1, stakerBalance2, stakerBalance3

  let totalTokenSupply, totalFreeSupply
  let currentPrice

  let projectAddress, projectAddress2
  let tx

  let data1 = 'some random task list'
  let data2 = 'some other random task list'

  before(async function() {
    // define variables to hold deployed contracts
    TR = await TokenRegistry.deployed()
    DT = await DistributeToken.deployed()
    PR = await ProjectRegistry.deployed()

    // mint 10000 tokens for proposer & each staker
    let mintingCost = await DT.weiRequired(tokens, {from: proposer})
    await DT.mint(tokens, {from: proposer, value: mintingCost});
    mintingCost = await DT.weiRequired(tokens, {from: staker1})
    await DT.mint(tokens, {from: staker1, value: mintingCost})
    mintingCost = await DT.weiRequired(tokens, {from: staker2})
    await DT.mint(tokens, {from: staker2, value: mintingCost})
    mintingCost = await DT.weiRequired(tokens, {from: staker3})
    await DT.mint(tokens, {from: staker3, value: mintingCost})
    proposerBalance = await DT.balanceOf(proposer)
    stakerBalance1 = await DT.balanceOf(staker1)
    stakerBalance2 = await DT.balanceOf(staker2)
    stakerBalance3 = await DT.balanceOf(staker3)
    totalTokenSupply = await DT.totalSupply()
    totalFreeSupply = await DT.totalFreeSupply()
    assert.equal(4 * tokens, proposerBalance.toNumber() + stakerBalance1.toNumber() + stakerBalance2.toNumber() + stakerBalance3.toNumber(), 'proposer or stakers did not successfully mint tokens')
    assert.equal(4 * tokens, totalTokenSupply, 'total supply did not update correctly')
    assert.equal(4 * tokens, totalFreeSupply, 'total free supply did not update correctly')

    //propose a project
    currentPrice = await DT.currentPrice()              //put this before propose project because current price changes slightly (rounding errors)
    tx = await TR.proposeProject(projectCost, stakingPeriod, {from: proposer})
    let log = tx.logs[0].args
    projectAddress = log.projectAddress.toString()
    PROJ = await Project.at(projectAddress)
    proposerTokenCost = Math.floor(Math.floor(projectCost / currentPrice) / proposeProportion)
    proposerBalance = await DT.balanceOf(proposer)
    totalFreeSupply = await DT.totalFreeSupply()
    assert.equal(4 * tokens - proposerTokenCost, totalFreeSupply, 'total free supply did not update correctly')
    assert.equal(4 * tokens, totalTokenSupply, 'total supply shouldn\'t have updated')
    assert.equal(proposerBalance, tokens - proposerTokenCost, 'DT did not set aside appropriate proportion to escrow')

    //fully stake the project
    let requiredTokens = Math.ceil(projectCost / await DT.currentPrice())
    await TR.stakeTokens(projectAddress, Math.floor(requiredTokens/3), {from: staker1})
    await TR.stakeTokens(projectAddress, Math.floor(requiredTokens/3), {from: staker2})
    let weiRemaining = projectCost - await PROJ.weiBal()
    requiredTokens = Math.ceil(weiRemaining / await DT.currentPrice())
    await TR.stakeTokens(projectAddress, requiredTokens, {from: staker3})

    //check that project is fully staked
    let state = await PROJ.state()
    assert.equal(state.toNumber(), 2, 'project should be in open state as it is now fully staked')

    //propose another project
    currentPrice = await DT.currentPrice()              //put this before propose project because current price changes slightly (rounding errors)
    tx = await TR.proposeProject(projectCost2, stakingPeriod, {from: proposer})
    log = tx.logs[0].args
    projectAddress2 = log.projectAddress.toString()
    PROJ2 = await Project.at(projectAddress2)

    //fully stake the project
    requiredTokens = Math.ceil(projectCost2 / await DT.currentPrice())
    await TR.stakeTokens(projectAddress2, Math.floor(requiredTokens/3), {from: staker1})
    await TR.stakeTokens(projectAddress2, Math.floor(requiredTokens/3), {from: staker2})
    weiRemaining = projectCost2 - await PROJ2.weiBal()
    requiredTokens = Math.ceil(weiRemaining / await DT.currentPrice())
    await TR.stakeTokens(projectAddress2, requiredTokens, {from: staker3})

    //check that project is fully staked
    state = await PROJ2.state()
    //assert.equal(state.toNumber(), 2, 'project should be in open state as it is now fully staked')

    await PR.addTaskHash(projectAddress2, web3.sha3(data2), {from: staker1})
    await PR.addTaskHash(projectAddress2, web3.sha3(data2), {from: staker2})

  })

  it('non-staker can\'t submit a task hash', async function() {
    errorThrown = false
    try {
      await PR.addTaskHash(projectAddress, web3.sha3(data), {from: nonStaker})
    } catch (e) {
      errorThrown = true
    }
    assertThrown(errorThrown, 'An error should have been thrown')
  })

  it('staker can submit a task hash', async function() {
    let openProjectsBefore = await PR.openProjects.call(projectAddress)
    await PR.addTaskHash(projectAddress, web3.sha3(data1), {from: staker1})
    let openProjectsAfter = await PR.openProjects.call(projectAddress)
    assert.equal(openProjectsAfter[0], web3.sha3(data1), 'first hash didn\'t update')
    assert.equal(openProjectsAfter[1].toNumber(), openProjectsBefore[1].toNumber(), 'logged nonexistant conflict')
    assert.equal(openProjectsAfter[2].toNumber(), openProjectsBefore[2].toNumber() + 1, 'didn\'t log submission')
  })

  it('another staker can submit a different task hash', async function() {
    let openProjectsBefore = await PR.openProjects.call(projectAddress)
    await PR.addTaskHash(projectAddress, web3.sha3(data2), {from: staker2})
    let openProjectsAfter = await PR.openProjects.call(projectAddress)
    assert.equal(openProjectsAfter[0], web3.sha3(data1), 'first hash shouldn\'t have updated')
    assert.equal(openProjectsAfter[1].toNumber(), 1, 'didn\'t log conflict')
    assert.equal(openProjectsAfter[2].toNumber(), openProjectsBefore[2].toNumber() + 1, 'didn\'t log submission')
  })

  it('another staker can submit the same task hash', async function() {
    let openProjectsBefore = await PR.openProjects.call(projectAddress)
    await PR.addTaskHash(projectAddress, web3.sha3(data1), {from: staker2})
    let openProjectsAfter = await PR.openProjects.call(projectAddress)
    assert.equal(openProjectsAfter[0], web3.sha3(data1), 'first hash shouldn\'t have updated')
    assert.equal(openProjectsAfter[1].toNumber(), 1, 'conflict should still exist')
    assert.equal(openProjectsAfter[2].toNumber(), openProjectsBefore[2].toNumber(), 'total submissions shouldn\'t update')
  })

  it('project with multiple task hash submissions becomes disputed', async function() {
    await evmIncreaseTime(7*24*60*60)
    await PR.checkActive(projectAddress)
    let state = await PROJ.state()
    assert.equal(state.toNumber(), 3, 'project should have entered dispute period')
  })

  it('project with same task hash submissions becomes active', async function() {
    await evmIncreaseTime(7*24*60*60)
    await PR.checkActive(projectAddress2)
    let state = await PROJ2.state()
    assert.equal(state.toNumber(), 4, 'project should have entered active period')
  })

  //when testing hashes, don't forget that solidity's keccak256 function hashes its inputs based on the argument types
  //also remember that uint is equivalent to uint256
  //keccak256(uint(1))
  //b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6

})
